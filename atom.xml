<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oraaange&#39;s Blog | why so serious?</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://orange-c.github.io/"/>
  <updated>2016-04-13T14:39:25.041Z</updated>
  <id>http://orange-c.github.io/</id>
  
  <author>
    <name>Oraaange</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试复习-3-JavaScript</title>
    <link href="http://orange-c.github.io/2016/04/10/fe-interview-3/"/>
    <id>http://orange-c.github.io/2016/04/10/fe-interview-3/</id>
    <published>2016-04-10T05:55:47.000Z</published>
    <updated>2016-04-13T14:39:25.041Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端面试复习" scheme="http://orange-c.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="interview" scheme="http://orange-c.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>前端面试复习-2-HTML&amp;CSS</title>
    <link href="http://orange-c.github.io/2016/03/27/fe-interview-2/"/>
    <id>http://orange-c.github.io/2016/03/27/fe-interview-2/</id>
    <published>2016-03-27T05:34:07.000Z</published>
    <updated>2016-04-13T14:39:22.814Z</updated>
    
    <content type="html">&lt;h2 id=&quot;HTML-5&quot;&gt;&lt;a href=&quot;#HTML-5&quot; class=&quot;headerlink&quot; title=&quot;HTML(5)&quot;&gt;&lt;/a&gt;HTML(5)&lt;/h2&gt;&lt;h3 id=&quot;HTML5新特性&quot;&gt;&lt;a href=&quot;#HTML5新特性&quot; class=&quot;headerlink&quot; title=&quot;HTML5新特性&quot;&gt;&lt;/a&gt;HTML5新特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语义化的标签（header,nav,footer,aside,article,section）&lt;/li&gt;
&lt;li&gt;拖放事件（drag类事件）&lt;/li&gt;
&lt;li&gt;跨文档消息传递（postMessage）&lt;/li&gt;
&lt;li&gt;媒体元素（audio，video标签）&lt;/li&gt;
&lt;li&gt;画布（Canvas） API&lt;/li&gt;
&lt;li&gt;地理位置定位（navigator.geolocation）API&lt;/li&gt;
&lt;li&gt;历史状态管理（更新history对象，pushState等）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;HTML5离线存储技术&quot;&gt;&lt;a href=&quot;#HTML5离线存储技术&quot; class=&quot;headerlink&quot; title=&quot;HTML5离线存储技术&quot;&gt;&lt;/a&gt;HTML5离线存储技术&lt;/h3&gt;&lt;p&gt;在用户离线时，可以正常访问站点，联网时可以更新缓存。使用方法就是在html标签中加上manifest属性,如下&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;manifest&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cache.manifest&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;cache.manifest文件格式如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CACHE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js/app.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;css/style.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resourse/logo.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ /offline.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;离线存储的manifest一般由三个部分组成:&lt;br&gt;1.CACHE:表示需要离线存储的资源列表&lt;br&gt;2.NETWORK:表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储&lt;br&gt;3.FALLBACK:(示例里面’/ /‘不是注释)表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问offline.html。&lt;/p&gt;
&lt;h3 id=&quot;Cookie和Web-Storage&quot;&gt;&lt;a href=&quot;#Cookie和Web-Storage&quot; class=&quot;headerlink&quot; title=&quot;Cookie和Web Storage&quot;&gt;&lt;/a&gt;Cookie和Web Storage&lt;/h3&gt;&lt;p&gt;Cookie，主要用途是保存登录信息，大小限制为4kb左右。一般由服务器生成，可设置失效时间，如果客户端生成的话，默认是浏览器关闭后失效。每次都会携带在HTTP头信息中，所以Cookie太大的话会导致http请求变得很大带来性能问题。&lt;/p&gt;
&lt;p&gt;Web Storage包含sessionStorage和localStorage。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sessionStorage 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复，浏览器或tab页关闭后，sessionStorage清空）&lt;/li&gt;
&lt;li&gt;localStorage 与session类似，但是在浏览器关闭，然后重新打开后数据仍然存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Web Storage包含以下方法：setItem(),getItem(),removeItem(),clear()&lt;/p&gt;
&lt;p&gt;同时Web Storage提供了storage事件，在创建，更新，删除数据项时会触发该事件（重复设置相同的键值不会触发），clear方法至多触发一次该事件。&lt;/p&gt;
&lt;h2 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;p&gt;这部分知识有些涉及到IE和其他浏览器不同的实现方式，有不少细节我还是不太了解，所以就大致复习一下常用的DOM操作&lt;/p&gt;
&lt;h3 id=&quot;获取元素的方法&quot;&gt;&lt;a href=&quot;#获取元素的方法&quot; class=&quot;headerlink&quot; title=&quot;获取元素的方法&quot;&gt;&lt;/a&gt;获取元素的方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;getElementById() Document能调用&lt;/li&gt;
&lt;li&gt;getElementsByTagName() 注意有s，返回HTMLCollection Document和Element能调用&lt;/li&gt;
&lt;li&gt;getElementsByClassName() 注意有s 返回HTMLCollection Document和Element能调用&lt;/li&gt;
&lt;li&gt;querySelector() 只返回获取的到第一个元素&lt;/li&gt;
&lt;li&gt;querySelectorALL() 返回NodeList&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;querySelector和querySelectorALL使用主要通过CSS选择符,可以通过Document和Element类型的节点调用它们。&lt;/p&gt;
&lt;h3 id=&quot;节点类型&quot;&gt;&lt;a href=&quot;#节点类型&quot; class=&quot;headerlink&quot; title=&quot;节点类型&quot;&gt;&lt;/a&gt;节点类型&lt;/h3&gt;&lt;p&gt;介绍几种常用的节点类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Document类型，表示整个文档，浏览器中document对象是HTMLDocument（继承自Document类型），同时也是window的一个属性，可以全局访问。document的一些常用属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title 表示文档标题&lt;/li&gt;
&lt;li&gt;body 表示body标签&lt;/li&gt;
&lt;li&gt;URL 表示页面的URL，不可修改&lt;/li&gt;
&lt;li&gt;referrer 表示来源页面的URL，不可修改（HTTP协议中是Referer，其实是当年拼错了Orz）&lt;/li&gt;
&lt;li&gt;domain 表示URL中的域名，可修改但是不能设置URL中不包含的域，而且不能把loose的域设置为tight的域&lt;/li&gt;
&lt;li&gt;forms 文档中form标签的集合&lt;/li&gt;
&lt;li&gt;images 文档中img标签的集合&lt;/li&gt;
&lt;li&gt;links 文档中带href特性的a标签的集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Element类型，元素类型，即常见的div,p标签等，常用属性包括id和className。元素通常包含特性，可以通过getAttribute(), setAttribute()和removeAttribute()操作（HTML5要求自定义特性应加上data前缀）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Text类型，包含纯文本内容，包括换行符空格等。通常那些没有被标签包裹起来的部分就是文本节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DocumentFragment类型，这个类型用来表示一个轻量文档，可以包含和控制节点。可以把它用作仓库，把需要添加的节点逐个放入其中，然后再将其添加到文档中，例如添加表格，这样可以避免浏览器反复渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;节点操作&quot;&gt;&lt;a href=&quot;#节点操作&quot; class=&quot;headerlink&quot; title=&quot;节点操作&quot;&gt;&lt;/a&gt;节点操作&lt;/h3&gt;&lt;p&gt;NodeList对象是基于DOM结构的动态查询，是双向绑定的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;document.createElement() 创建元素节点，参数例如”div”&lt;/li&gt;
&lt;li&gt;document.createTextNode() 创建文本节点，参数字符串，可包含html行内标签。&lt;/li&gt;
&lt;li&gt;childNodes NodeList对象，保存了一组有序子节点，包含文本节点&lt;/li&gt;
&lt;li&gt;children 与childNodes类似，但是不包括文本节点&lt;/li&gt;
&lt;li&gt;appendChild(newNode) 将newNode添加到childNodes的末尾&lt;/li&gt;
&lt;li&gt;insertBefore(newNode,someNode) 把newNode插入到somNode之前，如果somNode为null，则放在最后&lt;/li&gt;
&lt;li&gt;replaceChild(newNode,someNode) 把someNode替换成newNode，其中someNode会被移除&lt;/li&gt;
&lt;li&gt;removeChild(someNode) 移除某个节点&lt;/li&gt;
&lt;li&gt;innerHtml 表示标签内部的内容&lt;/li&gt;
&lt;li&gt;outerHtml 表示整个标签的内容，包含标签&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;如何优化DOM操作的性能&quot;&gt;&lt;a href=&quot;#如何优化DOM操作的性能&quot; class=&quot;headerlink&quot; title=&quot;如何优化DOM操作的性能&quot;&gt;&lt;/a&gt;如何优化DOM操作的性能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免反复使用DOM查询操作，把结果用变量缓存&lt;/li&gt;
&lt;li&gt;避免大量使用会造成重绘的DOM操作&lt;/li&gt;
&lt;li&gt;尽量使用ID选择器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;h3 id=&quot;关于事件冒泡和事件捕获？&quot;&gt;&lt;a href=&quot;#关于事件冒泡和事件捕获？&quot; class=&quot;headerlink&quot; title=&quot;关于事件冒泡和事件捕获？&quot;&gt;&lt;/a&gt;关于事件冒泡和事件捕获？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;事件冒泡指的是事件开始时由最具体的元素接受，然后逐级向上传播到不具体的元素。也可以说是在DOM树中从最底层的子节点一直“冒泡”到最顶层的父节点&lt;/li&gt;
&lt;li&gt;事件捕获与时间冒泡相反，事件开始时由最顶层的节点接受一直向下传播到事件的实际目标&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;事件绑定的方法？&quot;&gt;&lt;a href=&quot;#事件绑定的方法？&quot; class=&quot;headerlink&quot; title=&quot;事件绑定的方法？&quot;&gt;&lt;/a&gt;事件绑定的方法？&lt;/h3&gt;&lt;p&gt;DOM0级绑定方法，即直接给元素相应的ontype类型赋值&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;somenode.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;DOM2级绑定方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addEventaddEventListener(type,listener,useCapture)，参数type表示为“click”这种类型，参数useCapture表示是否使用事件捕获，默认为false，可不加。&lt;/li&gt;
&lt;li&gt;attachEvent(type,listener)，&lt;strong&gt;这种方法主要为了兼容IE8&lt;/strong&gt;，IE9可用第一种方法，其中参数type表示为“onclick”这种类型。&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addEvent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element, event, listener&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(element.addEventListener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        element.addEventListener(event,listener,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(element.attachEvent)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//IE8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        element.attachEvent(&lt;span class=&quot;string&quot;&gt;&#39;on&#39;&lt;/span&gt; + event, listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        element[&lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt; + event] = listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;关于事件对象event？&quot;&gt;&lt;a href=&quot;#关于事件对象event？&quot; class=&quot;headerlink&quot; title=&quot;关于事件对象event？&quot;&gt;&lt;/a&gt;关于事件对象event？&lt;/h3&gt;&lt;p&gt;浏览器会将一个事件对象event传给事件处理程序,event对象包含的常用属性和方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;currentTarget 表示当前处理事件的元素，即绑定的元素，时间处理程序中对象this始终等于这个值&lt;/li&gt;
&lt;li&gt;target 表示事件的目标，即事件的实际触发元素&lt;/li&gt;
&lt;li&gt;type 表示事件的类型&lt;/li&gt;
&lt;li&gt;cancelable 表示是否可以取消事件的默认行为&lt;/li&gt;
&lt;li&gt;preventDefault() 取消事件的默认行为&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是事件委托？&quot;&gt;&lt;a href=&quot;#什么是事件委托？&quot; class=&quot;headerlink&quot; title=&quot;什么是事件委托？&quot;&gt;&lt;/a&gt;什么是事件委托？&lt;/h3&gt;&lt;p&gt;事件委托就是把事件处理程序绑定在父元素上，通过事件冒泡来获取子元素的事件触发事件处理程序。通常用于列表项中。好处如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高性能，不用循环逐个绑定相同事件&lt;/li&gt;
&lt;li&gt;新元素拥有原来绑定的事件，这样就不用每次都为添加的新元素绑定事件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;ul&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//list不是数组是HTMlCollection，所以不能用Array的方法循环如foreach和map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event.target.style.backgroundColor = &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//点击li后将其北京改为红色。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(event.currentTarget) &lt;span class=&quot;comment&quot;&gt;// ul&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// ul&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(event.target) &lt;span class=&quot;comment&quot;&gt;//li&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;CSS-3&quot;&gt;&lt;a href=&quot;#CSS-3&quot; class=&quot;headerlink&quot; title=&quot;CSS(3)&quot;&gt;&lt;/a&gt;CSS(3)&lt;/h2&gt;&lt;h3 id=&quot;CSS选择器有哪些？&quot;&gt;&lt;a href=&quot;#CSS选择器有哪些？&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器有哪些？&quot;&gt;&lt;/a&gt;CSS选择器有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;元素选择器 h1&lt;/li&gt;
&lt;li&gt;id选择器 #someid&lt;/li&gt;
&lt;li&gt;类选择器 .someclass&lt;/li&gt;
&lt;li&gt;属性选择器 [attr=value]，[attr^=value]以value开头，[attr$=value]以value结尾，[attr*=value]包含value子串，[attr|=value]值为value或者以value-开头，[attr~=value]值用空格分割其中一个为value&lt;/li&gt;
&lt;li&gt;后代选择器 div p 表示div后代中的所有p&lt;/li&gt;
&lt;li&gt;子元素选择器 div&amp;gt;p 表示div直属后代中的所有p&lt;/li&gt;
&lt;li&gt;相邻元素选择器 div+p 表示跟在div后面的p&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个选择器之间用&lt;code&gt;,&lt;/code&gt;分割表示多个选择器共享属性。多个选择器之间不分割表示合并为一个选择器。选择器优先级tag&amp;gt;id&amp;gt;class。&lt;/p&gt;
&lt;h3 id=&quot;CSS伪元素有哪些？&quot;&gt;&lt;a href=&quot;#CSS伪元素有哪些？&quot; class=&quot;headerlink&quot; title=&quot;CSS伪元素有哪些？&quot;&gt;&lt;/a&gt;CSS伪元素有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;:after 匹配该元素的一个虚拟的最后子元素，配合content属性使用，默认为行内元素&lt;/li&gt;
&lt;li&gt;:before 匹配该元素的一个虚拟的最先子元素，与:after类似&lt;/li&gt;
&lt;li&gt;:first-line 匹配元素的第一行&lt;/li&gt;
&lt;li&gt;:first-letter 匹配元素的第一个字符&lt;/li&gt;
&lt;li&gt;:selection 匹配用户鼠标选中的部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CSS伪类有哪些？&quot;&gt;&lt;a href=&quot;#CSS伪类有哪些？&quot; class=&quot;headerlink&quot; title=&quot;CSS伪类有哪些？&quot;&gt;&lt;/a&gt;CSS伪类有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;:link 未被访问的链接&lt;/li&gt;
&lt;li&gt;:visited 已被访问的链接&lt;/li&gt;
&lt;li&gt;:active 被激活的元素，通常为鼠标按下至松开的那段时间&lt;/li&gt;
&lt;li&gt;:hover 用户将鼠标移至其上方时&lt;/li&gt;
&lt;li&gt;:focus 元素成为焦点时&lt;/li&gt;
&lt;li&gt;:first-child 元素为其父元素的第一个子元素时&lt;/li&gt;
&lt;li&gt;:nth-child(an+b) 匹配为其父元素第an+b个子元素的元素&lt;/li&gt;
&lt;li&gt;:nth-last-child(an+b) 同上但是顺序相反&lt;/li&gt;
&lt;li&gt;:first-of-type 匹配元素中所有子元素类型第一个出现的元素&lt;/li&gt;
&lt;li&gt;:last-of-type 匹配元素中所有子元素类型最后一个出现的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;position属性有哪些？&quot;&gt;&lt;a href=&quot;#position属性有哪些？&quot; class=&quot;headerlink&quot; title=&quot;position属性有哪些？&quot;&gt;&lt;/a&gt;position属性有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;static 默认值，元素处于正常的文档流之中，top, right, bottom, left 和 z-index 属性无效。&lt;/li&gt;
&lt;li&gt;relative 元素相对于原本的正常位置定位，不改变布局，这样会在此元素原本所在的位置留下空白，对display为表格型的元素无效&lt;/li&gt;
&lt;li&gt;absolute 不为元素预留空间，元素相对于与它最近的非static定位的祖先元素来定位。元素可以设置外边距（margins），并且不会与其他边距合并（即形成一个BFC）&lt;/li&gt;
&lt;li&gt;fixed 不为元素预留空间，相对屏幕视窗来定位，在屏幕滚动时位置不变&lt;/li&gt;
&lt;li&gt;sticky （新属性试验中，目前仅firefox实现）平时为relative，在特定条件变为fixed，类似于现在的浮动条&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;box-sizing属性值有哪些？&quot;&gt;&lt;a href=&quot;#box-sizing属性值有哪些？&quot; class=&quot;headerlink&quot; title=&quot;box-sizing属性值有哪些？&quot;&gt;&lt;/a&gt;box-sizing属性值有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;content-box 默认值，标准盒模型，width和height表示content的宽高，不包括padding，border，margin。&lt;/li&gt;
&lt;li&gt;border-box IE怪异模式（Quirks mode）使用的盒模型，width和height包括padding和border，不包括margin&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;如何在JavaScript中更改样式？&quot;&gt;&lt;a href=&quot;#如何在JavaScript中更改样式？&quot; class=&quot;headerlink&quot; title=&quot;如何在JavaScript中更改样式？&quot;&gt;&lt;/a&gt;如何在JavaScript中更改样式？&lt;/h3&gt;&lt;p&gt;访问元素的style属性，这个对象是CSSStyleDeclaration，包含了通过style特性指定的所有样式，所有短划线的CSS属性名转换为驼峰形式，如（background-color在JavaScript中为backgroundColor）&lt;/p&gt;
&lt;h3 id=&quot;谈谈flex？&quot;&gt;&lt;a href=&quot;#谈谈flex？&quot; class=&quot;headerlink&quot; title=&quot;谈谈flex？&quot;&gt;&lt;/a&gt;谈谈flex？&lt;/h3&gt;&lt;p&gt;又称弹性盒，可以自动调整子元素高宽，主要概念就是关于水平垂直两个轴的布局，属性值都比较方便实用，布局思路也很清晰。具体用法参考&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN -  flex&lt;/a&gt;和&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰前辈的教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;清除浮动的方法？&quot;&gt;&lt;a href=&quot;#清除浮动的方法？&quot; class=&quot;headerlink&quot; title=&quot;清除浮动的方法？&quot;&gt;&lt;/a&gt;清除浮动的方法？&lt;/h3&gt;&lt;p&gt;我一般在父元素加一个clearfix类，用after伪元素，用zoom触发hashLayout兼容IE6-7&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;visibility&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;zoom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;写一个常见的三列布局？&quot;&gt;&lt;a href=&quot;#写一个常见的三列布局？&quot; class=&quot;headerlink&quot; title=&quot;写一个常见的三列布局？&quot;&gt;&lt;/a&gt;写一个常见的三列布局？&lt;/h3&gt;&lt;p&gt;用float实现（兼容比较好）：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.left&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.right&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.wrapper&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;110px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;main&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;left&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用flex实现（方便）：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.wrapper&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.left&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;order&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.right&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;main&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;left&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML-5&quot;&gt;&lt;a href=&quot;#HTML-5&quot; class=&quot;headerlink&quot; title=&quot;HTML(5)&quot;&gt;&lt;/a&gt;HTML(5)&lt;/h2&gt;&lt;h3 id=&quot;HTML5新特性&quot;&gt;&lt;a href=&quot;#HTML5新特性&quot; class=&quot;headerlink&quot; title=&quot;HTML5新特性&quot;&gt;&lt;/a&gt;HTML5新特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语义化的标签（header,nav,footer,aside,article,section）&lt;/li&gt;
&lt;li&gt;拖放事件（drag类事件）&lt;/li&gt;
&lt;li&gt;跨文档消息传递（postMessage）&lt;/li&gt;
&lt;li&gt;媒体元素（audio，video标签）&lt;/li&gt;
&lt;li&gt;画布（Canvas） API&lt;/li&gt;
&lt;li&gt;地理位置定位（navigator.geolocation）API&lt;/li&gt;
&lt;li&gt;历史状态管理（更新history对象，pushState等）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端面试复习" scheme="http://orange-c.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="interview" scheme="http://orange-c.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>前端面试复习-1-浏览器和计算机网络等</title>
    <link href="http://orange-c.github.io/2016/03/25/fe-interview-1/"/>
    <id>http://orange-c.github.io/2016/03/25/fe-interview-1/</id>
    <published>2016-03-25T13:11:44.000Z</published>
    <updated>2016-04-13T14:39:19.649Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;打算好好复习面试要用到的知识点，也算是对自己学习的一个总结，一直以来我的学习都是缺乏笔记的&lt;del&gt;（喂你怎么考上大学的？&lt;/del&gt;。这次正好培养一下这个习惯。这些笔记可能在我之后看到有错误或者新东西之后继续更新更正，也算是完善一下自己的知识树吧。&lt;/p&gt;
&lt;h2 id=&quot;浏览器&quot;&gt;&lt;a href=&quot;#浏览器&quot; class=&quot;headerlink&quot; title=&quot;浏览器&quot;&gt;&lt;/a&gt;浏览器&lt;/h2&gt;&lt;h3 id=&quot;常见的浏览器内核有哪些？&quot;&gt;&lt;a href=&quot;#常见的浏览器内核有哪些？&quot; class=&quot;headerlink&quot; title=&quot;常见的浏览器内核有哪些？&quot;&gt;&lt;/a&gt;常见的浏览器内核有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Trident（IE,360搜狗的兼容模式）&lt;/li&gt;
&lt;li&gt;Gecko（Firefox）&lt;/li&gt;
&lt;li&gt;Webkit（Chrome,Safari,android Chrome,android,ios,360搜狗的极速模式）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;W3C和WHATWG分别是什么？&quot;&gt;&lt;a href=&quot;#W3C和WHATWG分别是什么？&quot; class=&quot;headerlink&quot; title=&quot;W3C和WHATWG分别是什么？&quot;&gt;&lt;/a&gt;W3C和WHATWG分别是什么？&lt;/h3&gt;&lt;p&gt;简而言之就是两个制定标准的组织，W3C党指微软，苹果等。 WHATWG党指谷歌，火狐等。浏览器终究还是商业斗争，web标准也是因为两党的斗争一直难以确定。他们在HTML5争得最多的还是最具争议的视频格式标准，音频格式标准（这两个的格式真的很奇怪……），图片格式标准和一些类似WebRTC，WebGL等谷歌提出的标准。&lt;/p&gt;
&lt;h3 id=&quot;ECMAScript和JavaScript的区别？&quot;&gt;&lt;a href=&quot;#ECMAScript和JavaScript的区别？&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript和JavaScript的区别？&quot;&gt;&lt;/a&gt;ECMAScript和JavaScript的区别？&lt;/h3&gt;&lt;p&gt;ECMA是欧洲计算机制造商协会（European Computer Manufacturers Association），其中与JavaScript有关的文件叫做ECMA-262。ECMA-262定义了语言的基础，web浏览器只是ECMA的宿主环境之一，JavaScript只是ECMAScript的一种实现。&lt;/p&gt;
&lt;h3 id=&quot;浏览器为什么给css加前缀？&quot;&gt;&lt;a href=&quot;#浏览器为什么给css加前缀？&quot; class=&quot;headerlink&quot; title=&quot;浏览器为什么给css加前缀？&quot;&gt;&lt;/a&gt;浏览器为什么给css加前缀？&lt;/h3&gt;&lt;p&gt;在标准还未确定时，部分浏览器根据最初的草案实现了部分功能，为了与之后确定下来的标准兼容，每种浏览器使用了自己的私有前缀与标准进行区分。所以带有私有前缀的属性在浏览器之间的实现可能有一点点不同。&lt;/p&gt;
&lt;h2 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h2&gt;&lt;h3 id=&quot;HTTP状态码有哪些？&quot;&gt;&lt;a href=&quot;#HTTP状态码有哪些？&quot; class=&quot;headerlink&quot; title=&quot;HTTP状态码有哪些？&quot;&gt;&lt;/a&gt;HTTP状态码有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1** (信息类) 表示接收到请求并继续处理&lt;ul&gt;
&lt;li&gt;100 (Continue/继续) 表示请求成功，允许继续发送附加信息，例如post请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2** (响应成功) 表示请求成功&lt;ul&gt;
&lt;li&gt;200 (OK/正常) 一切正常&lt;/li&gt;
&lt;li&gt;201 (Created/已创建) 请求成功并且服务器创建了新资源，应在头信息中给出其URL&lt;/li&gt;
&lt;li&gt;202 (Accepted/接受) 服务器已接受请求但是没有处理完&lt;/li&gt;
&lt;li&gt;205 (Reset Content/重置内容) 没有新资源但是浏览器要重置文档显示，用于强制浏览器清除表单域&lt;/li&gt;
&lt;li&gt;206 (Partial Content/局部内容) 在服务器完成了一个包含Range头信息的局部请求时被发送，可以用于&lt;strong&gt;断点续传&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3** (重定向类) 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息&lt;ul&gt;
&lt;li&gt;301 (Moved Permanently/永久重定向) 请求的文档在别的地方，新URL会在响应头信息中给出，浏览器自动连接到新URL&lt;/li&gt;
&lt;li&gt;302 (Moved Temporarily/临时性重定向) 与301类似，但是头信息中的URL只是临时性的交换地址。&lt;/li&gt;
&lt;li&gt;303 (See Other/参见其他信息) 与301，302类似，要求总是用GET请求新的URL&lt;/li&gt;
&lt;li&gt;304 (Not Modified/未修正) 自上次请求后，资源未被修改，通过客户端If-Modified-Since头信息来判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4** (客户端错误类) 表示客户端的错误&lt;ul&gt;
&lt;li&gt;400 (Bad Request/错误请求) 客户端请求语法错误&lt;/li&gt;
&lt;li&gt;401 (Unauthorized/未授权) 在授权头信息中没有有效的身份信息，请求未授权。&lt;/li&gt;
&lt;li&gt;403 (Forbidden/禁止) 有授权但是服务器拒绝提供资源（权限不同？）&lt;/li&gt;
&lt;li&gt;404 (Not Found/未找到) 找不到与URI相匹配的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5** (服务器错误类) 表示服务器的错误&lt;ul&gt;
&lt;li&gt;500 (Internal Server Error/内部服务器错误) 最常见的服务器端错误&lt;/li&gt;
&lt;li&gt;503 (Service Unavailable/服务无法获得) 可能是因为服务器维护或者超载而无法响应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HTTP中与缓存相关的头信息&quot;&gt;&lt;a href=&quot;#HTTP中与缓存相关的头信息&quot; class=&quot;headerlink&quot; title=&quot;HTTP中与缓存相关的头信息&quot;&gt;&lt;/a&gt;HTTP中与缓存相关的头信息&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Expires GMT时间，告知浏览器在这个时间前信任缓存中的副本，缺点是客户端时间可能不准&lt;/li&gt;
&lt;li&gt;Cache-Control 属于http1.1 内容可能有以下几种&lt;ol&gt;
&lt;li&gt;public 响应头，通知浏览器无条件缓存该响应&lt;/li&gt;
&lt;li&gt;private 响应头，通知浏览器只针对通知浏览器只针对单个用户缓存响应. 且可以具体指定某个字段.如private–”username”&lt;/li&gt;
&lt;li&gt;no-cache 请求头，浏览器去服务器取数据并验证缓存。响应头，告诉浏览器必须要回服务器校验，不管有没有缓存。如果确定没有被改，可以使用缓存中的数据。&lt;/li&gt;
&lt;li&gt;no-store 要求浏览器任何情况下都不要缓存&lt;/li&gt;
&lt;li&gt;max-age 强制浏览器根据该值校验缓存。即与自身的Age值，与请求时间做比较，如果超出max-age值，则强制去服务器端验证。以确保返回一个新鲜的响应。其功能与传统的Expires类似，但区别在于Expires是根据某个特定日期值做比较，一但客户端自身的时间不准确.则结果可能就是错误的，而max-age则都是客户端时间比较。max-age的优先级高于Expires。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Last-Modified GMT时间，告诉客户端这个资源的最后修改时间。与其相对应的有If-Modified-Since，客户端在请求时带上这个表示客户端中资源的最后修改时间，然后服务端将两个时间验证，决定是否返回304。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;GET和POST扫盲？&quot;&gt;&lt;a href=&quot;#GET和POST扫盲？&quot; class=&quot;headerlink&quot; title=&quot;GET和POST扫盲？&quot;&gt;&lt;/a&gt;GET和POST扫盲？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;GET和POST与数据如何传递没有关系。HTTP协议中，Method和data是正交的两个概念，使用哪个Method与应用层数据如何传递没有关系。我们常见的说法是HTML标准对HTTP协议用法的约定（即GET用URL或Cookie传参，POST用BODY传参）。&lt;/li&gt;
&lt;li&gt;HTTP协议中对Http头和BODY都没有长度要求。URL的长度限制有两方面原因&lt;ul&gt;
&lt;li&gt;浏览器限制&lt;/li&gt;
&lt;li&gt;服务器限制，为了安全和稳定，防止服务器负担太大，是针对所有HTTP请求的限制，与Method没关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GET和POST都不安全，要安全就用Https。&lt;/li&gt;
&lt;li&gt;HTTP协议中GET是安全和幂等的。POST不安全也不幂等。（幂等：一次或多次操作具有相同的作用）安全和幂等的意义在于当操作没有达到预期的目标时，我们可以不停的重试，而不会对资源产生副作用。同理PUT，DELETE也是安全和幂等的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Https是什么？&quot;&gt;&lt;a href=&quot;#Https是什么？&quot; class=&quot;headerlink&quot; title=&quot;Https是什么？&quot;&gt;&lt;/a&gt;Https是什么？&lt;/h3&gt;&lt;p&gt;以安全为目的的http通道，在http下加入TLS（历史原因，SSL3.0之后被TLS替代）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTPS协议需要申请证书，大部分要收费。&lt;/li&gt;
&lt;li&gt;http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。&lt;/li&gt;
&lt;li&gt;http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。&lt;/li&gt;
&lt;li&gt;http的连接简单，是无状态的。HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;从输入URL到页面加载显示完成，发生了什么？&quot;&gt;&lt;a href=&quot;#从输入URL到页面加载显示完成，发生了什么？&quot; class=&quot;headerlink&quot; title=&quot;从输入URL到页面加载显示完成，发生了什么？&quot;&gt;&lt;/a&gt;从输入URL到页面加载显示完成，发生了什么？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;浏览器开启一个线程来处理这个请求，对URL分析如果是http协议就按照web方式来处理&lt;/li&gt;
&lt;li&gt;通过DNS解析获取IP地址，设置UA等信息发出第二个GET请求&lt;/li&gt;
&lt;li&gt;进行HTTP协议对话，客户端发送请求报头&lt;/li&gt;
&lt;li&gt;进入到服务器上的Web Server，如Apache、Tomcat、Node.JS等服务器&lt;/li&gt;
&lt;li&gt;进入部署好的后台应用，找到对应的请求处理&lt;/li&gt;
&lt;li&gt;处理结束返回报头和资源，如果是访问过的资源，比较服务器最后修改时间，选择是否返回304&lt;/li&gt;
&lt;li&gt;如果html没有缓存，浏览器就开始下载html文档，同时使用缓存资源&lt;/li&gt;
&lt;li&gt;html一边下载一边解析，根据标签建立DOM&lt;/li&gt;
&lt;li&gt;根据url下载所需css，js，图片资源，css是异步下载，同步施行，会阻塞式地建立CSSOM，和DOM一起渲染成完整的render树&lt;/li&gt;
&lt;li&gt;js是异步下载同步执行，在js后面的html内容呈现会被阻塞&lt;/li&gt;
&lt;li&gt;当js运行完成，页面加载完成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TIPS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果把CSS放在底部，页面会出现无样式布局直到CSS加载完成出现闪屏的现象（CSS加载完成后再次渲染）&lt;/li&gt;
&lt;li&gt;当浏览器遇到（内嵌）script标签时，当前浏览器无从获知javaScript是否会修改页面内容。因此，这时浏览器会停止处理页面，先执行javaScript代码，然后再继续解析和渲染页面。同样的情况也发生在使用 src 属性加在javaScript的过程中（即外链 javaScript），浏览器必须先花时间下载外链文件中的代码，然后解析并执行它。在这个过程中，页面渲染和用户交互完全被阻塞了。也就是说：每当浏览器解析到script标签（无论内嵌还是外链）时，浏览器会（一根筋地）优先下载、解析并执行该标签中的javaScript代码，而阻塞了其后所有页面内容的下载和渲染。从 IE 8、Firefox 3.5、Safari 4 和 Chrome 2 开始都允许并行下载 JavaScript 文件 script标签在下载外部资源时不会阻塞其他script标签。遗憾的是，JavaScript 下载过程仍然会阻塞其他资源的下载，比如样式文件和图片(之前的版本会阻塞所有资源的下载),还是会锁死浏览器的一段时间（无法交互）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端性能优化方法&quot;&gt;&lt;a href=&quot;#前端性能优化方法&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化方法&quot;&gt;&lt;/a&gt;前端性能优化方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;请求数量：合并压缩JS和CSS，CSS sprite，拆分初始化负载（按需加载？），划分主域，&lt;/li&gt;
&lt;li&gt;请求大小：合并压缩JS和CSS，CSS sprite，开启gzip，精简JS，图像优化&lt;/li&gt;
&lt;li&gt;缓存利用：使用CDN，使用外部JavaScript和CSS，减少DNS查找&lt;/li&gt;
&lt;li&gt;页面结构：将样式表放在顶部，将脚本放在底部&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于划分主域，浏览器执行“每个服务端最大连接数”的限制是根据URL上的主机名，而不是解析出来的IP地址。为了新域建立一条CNAME记录，CNAME仅仅是域名的一个别名。即使域名都指向同一个服务器，浏览器依旧会为每个主机名开放最大连接数。域的数量最好是两个，过多可能会导致服务器端压力过大。&lt;/p&gt;
&lt;h2 id=&quot;浏览器客户端安全&quot;&gt;&lt;a href=&quot;#浏览器客户端安全&quot; class=&quot;headerlink&quot; title=&quot;浏览器客户端安全&quot;&gt;&lt;/a&gt;浏览器客户端安全&lt;/h2&gt;&lt;h3 id=&quot;XSS原理&quot;&gt;&lt;a href=&quot;#XSS原理&quot; class=&quot;headerlink&quot; title=&quot;XSS原理&quot;&gt;&lt;/a&gt;XSS原理&lt;/h3&gt;&lt;h3 id=&quot;XSS防范&quot;&gt;&lt;a href=&quot;#XSS防范&quot; class=&quot;headerlink&quot; title=&quot;XSS防范&quot;&gt;&lt;/a&gt;XSS防范&lt;/h3&gt;&lt;h3 id=&quot;CSRF原理&quot;&gt;&lt;a href=&quot;#CSRF原理&quot; class=&quot;headerlink&quot; title=&quot;CSRF原理&quot;&gt;&lt;/a&gt;CSRF原理&lt;/h3&gt;&lt;p&gt;CSRF，跨站点请求伪造。未经授权的系统会伪造自己（可能通过使用者的Cookie等信息）让服务器认为它合法。&lt;/p&gt;
&lt;h3 id=&quot;CSRF防范&quot;&gt;&lt;a href=&quot;#CSRF防范&quot; class=&quot;headerlink&quot; title=&quot;CSRF防范&quot;&gt;&lt;/a&gt;CSRF防范&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;验证码&lt;/li&gt;
&lt;li&gt;请求加上计算获得的TOKEN&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;打算好好复习面试要用到的知识点，也算是对自己学习的一个总结，一直以来我的学习都是缺乏笔记的&lt;del&gt;（喂你怎么考上大学的？&lt;/del&gt;。这次正好培养一下这个习惯。这些笔记可能在我之后看到有错误或者新东西之后继续更新更正，也算是完善一下自己的知识树吧。&lt;/p&gt;
&lt;h2 id=&quot;浏览器&quot;&gt;&lt;a href=&quot;#浏览器&quot; class=&quot;headerlink&quot; title=&quot;浏览器&quot;&gt;&lt;/a&gt;浏览器&lt;/h2&gt;&lt;h3 id=&quot;常见的浏览器内核有哪些？&quot;&gt;&lt;a href=&quot;#常见的浏览器内核有哪些？&quot; class=&quot;headerlink&quot; title=&quot;常见的浏览器内核有哪些？&quot;&gt;&lt;/a&gt;常见的浏览器内核有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Trident（IE,360搜狗的兼容模式）&lt;/li&gt;
&lt;li&gt;Gecko（Firefox）&lt;/li&gt;
&lt;li&gt;Webkit（Chrome,Safari,android Chrome,android,ios,360搜狗的极速模式）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端面试复习" scheme="http://orange-c.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="interview" scheme="http://orange-c.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>谈谈CORS跨域</title>
    <link href="http://orange-c.github.io/2016/03/22/html5-CORS/"/>
    <id>http://orange-c.github.io/2016/03/22/html5-CORS/</id>
    <published>2016-03-22T06:04:14.000Z</published>
    <updated>2016-04-13T14:44:16.460Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天面试的时候被问到了关于跨域请求的问题，我就说用JSONP，iframe这些。面试官姐姐又追问我还有其他的吗，我表示不知道（一脸懵逼），后来告诉还有CORS，这几天就回来研究了下这个，发现是属于XMLHttpRequest2中的一个特性，而且果不其然老IE（IE8/9）是用其他API实现的。&lt;/p&gt;
&lt;h2 id=&quot;什么是CORS&quot;&gt;&lt;a href=&quot;#什么是CORS&quot; class=&quot;headerlink&quot; title=&quot;什么是CORS&quot;&gt;&lt;/a&gt;什么是CORS&lt;/h2&gt;&lt;p&gt;CORS全称是Cross-Origin Resource Sharing(跨域资源共享)，是W3C提出的跨域请求方案，需要服务器端的支持。与JSONP相比，主要有以下几点不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSONP只能实现GET请求。CORS支持所有类型的HTTP请求&lt;/li&gt;
&lt;li&gt;使用CORS，开发者可以用普通的XMLHttpRequest发起请求和获得数据，相比JSONP有更好的错误处理&lt;/li&gt;
&lt;li&gt;JSONP兼容老的浏览器。不过考虑到IE8/9能够通过XDomainRequest实现CORS请求，所以主流浏览器基本实现CORS。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;可以看出CORS相比于JSONP基本全是优点，以后的跨域请求应该都是用CORS实现。&lt;/p&gt;
&lt;h2 id=&quot;创建CORS请求对象&quot;&gt;&lt;a href=&quot;#创建CORS请求对象&quot; class=&quot;headerlink&quot; title=&quot;创建CORS请求对象&quot;&gt;&lt;/a&gt;创建CORS请求对象&lt;/h2&gt;&lt;p&gt;因为CORS是属于XMLHttpRequest2的一部分，所以主要要做的就是区分出IE8/9和不支持XMLHttpRequest2的浏览器。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createCORSRequest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;method, url&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;withCredentials&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xhr) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 支持CORS    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 检查XMLHttpRequest对象是否有“withCredentials”属性,withCredentials仅存在于XMLHTTPRequest2对象里    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xhr.open(method, url, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.XDomainRequest) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// XDomainRequest仅存在于IE中，是IE用于支持CORS请求的方式    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XDomainRequest();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xhr.open(method, url);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 不支持CORS    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xhr = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xhr;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = createCORSRequest(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!xhr) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;CORS not supported&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send(); &lt;span class=&quot;comment&quot;&gt;// 发送请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;服务器支持&quot;&gt;&lt;a href=&quot;#服务器支持&quot; class=&quot;headerlink&quot; title=&quot;服务器支持&quot;&gt;&lt;/a&gt;服务器支持&lt;/h2&gt;&lt;p&gt;服务器端对CORS的支持主要通过设置HTTP头Access-Control-Allow-Origin实现，如果浏览器检测到相应设置，就能允许AJAX跨域请求。&lt;br&gt;HTTP头的设置方法可以参考这个网站&lt;a href=&quot;http://enable-cors.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;enable cross-origin resource sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在设置时最好限制请求的来源(如下)，这样就可以防止恶意站点对服务器通过XSS攻击&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Access-Control-Allow-Origin: http://www.some.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/yuzhongwusan/p/3677955.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5安全：CORS（跨域资源共享）简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMLHttpRequest Level 2 使用指南 - 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天面试的时候被问到了关于跨域请求的问题，我就说用JSONP，iframe这些。面试官姐姐又追问我还有其他的吗，我表示不知道（一脸懵逼），后来告诉还有CORS，这几天就回来研究了下这个，发现是属于XMLHttpRequest2中的一个特性，而且果不其然老IE（IE8/9）是用其他API实现的。&lt;/p&gt;
&lt;h2 id=&quot;什么是CORS&quot;&gt;&lt;a href=&quot;#什么是CORS&quot; class=&quot;headerlink&quot; title=&quot;什么是CORS&quot;&gt;&lt;/a&gt;什么是CORS&lt;/h2&gt;&lt;p&gt;CORS全称是Cross-Origin Resource Sharing(跨域资源共享)，是W3C提出的跨域请求方案，需要服务器端的支持。与JSONP相比，主要有以下几点不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSONP只能实现GET请求。CORS支持所有类型的HTTP请求&lt;/li&gt;
&lt;li&gt;使用CORS，开发者可以用普通的XMLHttpRequest发起请求和获得数据，相比JSONP有更好的错误处理&lt;/li&gt;
&lt;li&gt;JSONP兼容老的浏览器。不过考虑到IE8/9能够通过XDomainRequest实现CORS请求，所以主流浏览器基本实现CORS。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML&CSS" scheme="http://orange-c.github.io/categories/HTML-CSS/"/>
    
    
      <category term="CORS" scheme="http://orange-c.github.io/tags/CORS/"/>
    
      <category term="XMLHttpRequest" scheme="http://orange-c.github.io/tags/XMLHttpRequest/"/>
    
  </entry>
  
  <entry>
    <title>谈谈JavaScript的作用域链</title>
    <link href="http://orange-c.github.io/2016/03/21/javascript-scope/"/>
    <id>http://orange-c.github.io/2016/03/21/javascript-scope/</id>
    <published>2016-03-21T11:59:14.000Z</published>
    <updated>2016-04-13T14:44:01.197Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作用域链，闭包，原型链算是JavaScript中比较有特色的三个知识点。我会分三篇文章讲讲我对于这三个东西的理解。&lt;/p&gt;
&lt;h2 id=&quot;JavaScript中的作用域&quot;&gt;&lt;a href=&quot;#JavaScript中的作用域&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的作用域&quot;&gt;&lt;/a&gt;JavaScript中的作用域&lt;/h2&gt;&lt;p&gt;每一种语言都有作用域的概念，所谓作用域就是变量与函数的可用范围，确定了变量与函数的可见性和生命周期。&lt;br&gt;JavaScript中有两种作用域，全局作用域和局部作用域&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;全局作用域&quot;&gt;&lt;a href=&quot;#全局作用域&quot; class=&quot;headerlink&quot; title=&quot;全局作用域&quot;&gt;&lt;/a&gt;全局作用域&lt;/h3&gt;&lt;p&gt;以下情况一般拥有全局作用域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在全局声明的函数和变量都有全局作用域&lt;/li&gt;
&lt;li&gt;所有未定义直接赋值的变量&lt;/li&gt;
&lt;li&gt;所有window的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;局部作用域&quot;&gt;&lt;a href=&quot;#局部作用域&quot; class=&quot;headerlink&quot; title=&quot;局部作用域&quot;&gt;&lt;/a&gt;局部作用域&lt;/h3&gt;&lt;p&gt;在函数内部声明的变量和函数只能在该函数内部访问到，即拥有局部作用域&lt;/p&gt;
&lt;h2 id=&quot;作用域链&quot;&gt;&lt;a href=&quot;#作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域链&quot;&gt;&lt;/a&gt;作用域链&lt;/h2&gt;&lt;p&gt;JavaScript中，一切都是对象，包括函数。而函数有一个内部属性&lt;code&gt;[[scope]]&lt;/code&gt;，里面包含了函数的可访问的作用域对象的集合，这个集合被称为作用域链。&lt;/p&gt;
&lt;h3 id=&quot;作用域链的创建&quot;&gt;&lt;a href=&quot;#作用域链的创建&quot; class=&quot;headerlink&quot; title=&quot;作用域链的创建&quot;&gt;&lt;/a&gt;作用域链的创建&lt;/h3&gt;&lt;p&gt;作用域链在函数执行时创建。&lt;strong&gt;作用域链的前端，始终是当前环境的变量对象&lt;/strong&gt;。如果这个环境是函数，则将其活动对象作为变量对象，里面包含了该函数的所有局部变量，参数以及this。&lt;br&gt;把作用域链当成一个对象数组，先把该函数的变量对象push进数组，然后把函数的外部环境的作用域push进数组，下一个就是外部环境的外部环境的变量对象，一直往外直到全局环境，&lt;strong&gt;即作用域的最后一个对象肯定是全局环境的作用域&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hehe = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lala = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bar = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hehe + lala;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上面这个函数为例，执行&lt;code&gt;foo&lt;/code&gt;函数时，函数作用域链前端首先是该函数的变量对象，里面包含了局部变量&lt;code&gt;hehe&lt;/code&gt;、&lt;code&gt;lala&lt;/code&gt;以及对应的值，而&lt;code&gt;bar&lt;/code&gt;为什么不在呢？因为它是未定义的，所以它直接被添加到全局环境的变量对象里面，也就是&lt;code&gt;foo&lt;/code&gt;函数作用域链的第二个对象里面。&lt;br&gt;PS: 可见未定义变量会污染全局环境，所以声明变量不要漏掉&lt;code&gt;var&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;作用域链的作用&quot;&gt;&lt;a href=&quot;#作用域链的作用&quot; class=&quot;headerlink&quot; title=&quot;作用域链的作用&quot;&gt;&lt;/a&gt;作用域链的作用&lt;/h3&gt;&lt;p&gt;作用域链的目的是保证当前执行环境对可访问的变量和函数的有序访问。&lt;br&gt;具体实现就是：函数内部标识符解析时会沿着作用域链一级一级地搜索。搜索过程始终从作用域链前端开始，直到最后一个对象即全局变量对象为止，如果找不到的话，就是undefined。&lt;br&gt;这样就可以保证内部变量的优先级始终大于外部变量&lt;/p&gt;
&lt;h3 id=&quot;变量提升问题&quot;&gt;&lt;a href=&quot;#变量提升问题&quot; class=&quot;headerlink&quot; title=&quot;变量提升问题&quot;&gt;&lt;/a&gt;变量提升问题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;456&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上面这个函数为例，按常理理解，应该是先输出全局变量123，再输出局部变量456，然而第一个却输出了undefined，这是为什么呢？&lt;br&gt;因为函数在执行时会先根据局部变量创建作用域链，&lt;strong&gt;这是在整个函数执行之前就完成的&lt;/strong&gt;，所以第一次输出时，该函数的变量对象中已经包含了name这个变量，从而导致解析时在作用域链第一个对象就停止，而不会访问到全局变量，同时那个时候局部变量name并没有赋值，所以会输出undefined。这种现象叫做变量提升。&lt;br&gt;PS: 在ES6中通过使用let标识符可以防止这个现象的出现&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = &lt;span class=&quot;string&quot;&gt;&#39;yoo&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;456&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看这个例子，这里面第一次赋值name没有定义，理论上应该是在window对象中。&lt;strong&gt;但是因为下面的定义&lt;/strong&gt;，所以在函数创建时，那么这个变量已经在函数的作用域中，第一次赋值会成功赋值给函数作用域的name变量而不是window作用域中的name，所以调用window.name时会显示undefined。&lt;/p&gt;
&lt;h2 id=&quot;作用域链的延长&quot;&gt;&lt;a href=&quot;#作用域链的延长&quot; class=&quot;headerlink&quot; title=&quot;作用域链的延长&quot;&gt;&lt;/a&gt;作用域链的延长&lt;/h2&gt;&lt;p&gt;部分语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后移除。主要由两种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with语句&lt;/li&gt;
&lt;li&gt;try-catch中catch块&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;with语句&quot;&gt;&lt;a href=&quot;#with语句&quot; class=&quot;headerlink&quot; title=&quot;with语句&quot;&gt;&lt;/a&gt;with语句&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;平时有优化需要可以把所需对象存储在局部变量中，&lt;strong&gt;不推荐使用with语句&lt;/strong&gt;，可能造成bug和性能损失。&lt;br&gt;详情可参考&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;with - JavaScript | MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hehe = &lt;span class=&quot;string&quot;&gt;&#39;?name=1&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;(location)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = href + hehe;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(); &lt;span class=&quot;comment&quot;&gt;// www.some.com?name=1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看上面这个例子，&lt;code&gt;with&lt;/code&gt;语句吧&lt;code&gt;location&lt;/code&gt;对象添加到了作用域链前端，因此在访问&lt;code&gt;href&lt;/code&gt;时，其实是访问了&lt;code&gt;location.href&lt;/code&gt;。在&lt;code&gt;with&lt;/code&gt;语句执行完毕后，作用域链就返回之前的状态&lt;/p&gt;
&lt;h3 id=&quot;try-catch中catch块&quot;&gt;&lt;a href=&quot;#try-catch中catch块&quot; class=&quot;headerlink&quot; title=&quot;try-catch中catch块&quot;&gt;&lt;/a&gt;try-catch中catch块&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someThing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当&lt;code&gt;try&lt;/code&gt;代码块中的语句发生错误时，执行过程跳转到&lt;code&gt;catch&lt;/code&gt;语句块，并且把一个异常对象添加到作用域链的头部。在&lt;code&gt;catch&lt;/code&gt;语句执行完毕后，作用域链就返回之前的状态。&lt;/p&gt;
&lt;p&gt;PS: 可以选择把错误处理委托给一个函数。这样的话只执行一条语句，并且没有访问局部变量，对性能的影响就比较小。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someThing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handleError(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 开发进阶：理解 JavaScript 作用域和作用域链&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;with - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;try…catch - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作用域链，闭包，原型链算是JavaScript中比较有特色的三个知识点。我会分三篇文章讲讲我对于这三个东西的理解。&lt;/p&gt;
&lt;h2 id=&quot;JavaScript中的作用域&quot;&gt;&lt;a href=&quot;#JavaScript中的作用域&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的作用域&quot;&gt;&lt;/a&gt;JavaScript中的作用域&lt;/h2&gt;&lt;p&gt;每一种语言都有作用域的概念，所谓作用域就是变量与函数的可用范围，确定了变量与函数的可见性和生命周期。&lt;br&gt;JavaScript中有两种作用域，全局作用域和局部作用域&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://orange-c.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://orange-c.github.io/tags/JavaScript/"/>
    
      <category term="scope" scheme="http://orange-c.github.io/tags/scope/"/>
    
  </entry>
  
  <entry>
    <title>谈谈JavaScript中的this</title>
    <link href="http://orange-c.github.io/2016/03/16/javascript-this/"/>
    <id>http://orange-c.github.io/2016/03/16/javascript-this/</id>
    <published>2016-03-16T10:25:42.000Z</published>
    <updated>2016-04-13T14:44:07.078Z</updated>
    
    <content type="html">&lt;h2 id=&quot;何为this&quot;&gt;&lt;a href=&quot;#何为this&quot; class=&quot;headerlink&quot; title=&quot;何为this&quot;&gt;&lt;/a&gt;何为this&lt;/h2&gt;&lt;p&gt;一般而言，在JavaScript中，this指向函数&lt;strong&gt;执行&lt;/strong&gt;时的当前对象。换句话说，这个关键字与函数的执行环境有关，与声明环境无关。所以this的指向要看如何去调用这个函数而不是声明。&lt;/p&gt;
&lt;h2 id=&quot;不同调用方式中的this&quot;&gt;&lt;a href=&quot;#不同调用方式中的this&quot; class=&quot;headerlink&quot; title=&quot;不同调用方式中的this&quot;&gt;&lt;/a&gt;不同调用方式中的this&lt;/h2&gt;&lt;h3 id=&quot;作为对象的方法调用&quot;&gt;&lt;a href=&quot;#作为对象的方法调用&quot; class=&quot;headerlink&quot; title=&quot;作为对象的方法调用&quot;&gt;&lt;/a&gt;作为对象的方法调用&lt;/h3&gt;&lt;p&gt;把函数赋值给对象的一个属性，然后&lt;strong&gt;通过该对象&lt;/strong&gt;调用该方法，此时函数的执行环境就是这个对象，所以this指向该对象&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;lala&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;hehe&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.show(); &lt;span class=&quot;comment&quot;&gt;// hehe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;换个更清晰的写法，我们把声明和调用放在两个对象里面&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;hehe&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; t_obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;lala&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: obj.show&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t_obj.show(); &lt;span class=&quot;comment&quot;&gt;// lala&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到show虽然是在obj中声明的，但是通过t_obj调用了这个方法，所以此时this指向t_obj。&lt;/p&gt;
&lt;h3 id=&quot;作为函数调用&quot;&gt;&lt;a href=&quot;#作为函数调用&quot; class=&quot;headerlink&quot; title=&quot;作为函数调用&quot;&gt;&lt;/a&gt;作为函数调用&lt;/h3&gt;&lt;p&gt;我们将上面的代码改一下，将obj.show赋值给全局变量show再调用他，此时this绑定到全局对象&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;lala&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;hehe&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; show = obj.show;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show();&lt;span class=&quot;comment&quot;&gt;// lala&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在函数内部的函数调用&quot;&gt;&lt;a href=&quot;#在函数内部的函数调用&quot; class=&quot;headerlink&quot; title=&quot;在函数内部的函数调用&quot;&gt;&lt;/a&gt;在函数内部的函数调用&lt;/h3&gt;&lt;p&gt;在函数内部调用一个函数，比如在一个对象的方法里面调用一个函数时，this会指向全局对象（讲道理应该指向对象）。这是JavaScript设计比较坑的一个地方，平时经常使用命名一个新变量that替代this。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;lala&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;hehe&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.show(); &lt;span class=&quot;comment&quot;&gt;// lala&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修正版：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;lala&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;hehe&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; that = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(that.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.show(); &lt;span class=&quot;comment&quot;&gt;// hehe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;作为构造函数调用&quot;&gt;&lt;a href=&quot;#作为构造函数调用&quot; class=&quot;headerlink&quot; title=&quot;作为构造函数调用&quot;&gt;&lt;/a&gt;作为构造函数调用&lt;/h3&gt;&lt;p&gt;我们常使用new 构造函数名()来创建一个对象，此时函数中的this指向新创建的对象。如果不使用new，则和普通函数一样绑定到全局对象&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo();&lt;span class=&quot;comment&quot;&gt;// test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo();&lt;span class=&quot;comment&quot;&gt;// window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在setTimeout、setInterval和匿名函数中&quot;&gt;&lt;a href=&quot;#在setTimeout、setInterval和匿名函数中&quot; class=&quot;headerlink&quot; title=&quot;在setTimeout、setInterval和匿名函数中&quot;&gt;&lt;/a&gt;在&lt;code&gt;setTimeout&lt;/code&gt;、&lt;code&gt;setInterval&lt;/code&gt;和匿名函数中&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;setTimeout&lt;/code&gt;,&lt;code&gt;setInterval&lt;/code&gt;和匿名函数执行时的对象为全局对象，所以this也指向全局对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;lala&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;hehe&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.show(); &lt;span class=&quot;comment&quot;&gt;// lala&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;函数调用call和apply方法时&quot;&gt;&lt;a href=&quot;#函数调用call和apply方法时&quot; class=&quot;headerlink&quot; title=&quot;函数调用call和apply方法时&quot;&gt;&lt;/a&gt;函数调用&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;方法时&lt;/h3&gt;&lt;p&gt;两者的本质的就是改变函数当前的上下文环境即this，两者的区别是&lt;code&gt;call&lt;/code&gt;接受一个个参数，而&lt;code&gt;apply&lt;/code&gt;接受一个参数数组。&lt;/p&gt;
&lt;p&gt;PS：使用&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;函数的时候要注意，如果传递的 this 值不是一个对象，JavaScript 将会尝试使用内部&lt;code&gt;ToObject&lt;/code&gt;操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 ‘foo’ ，那么就会使用相关构造函数将它转换为对象，所以原始值 7 通过&lt;code&gt;new Number(7)&lt;/code&gt;被转换为对象，而字符串’foo’使用&lt;code&gt;new String(&amp;#39;foo&amp;#39;)&lt;/code&gt;转化为对象&lt;/p&gt;
&lt;h3 id=&quot;函数调用bind方法时&quot;&gt;&lt;a href=&quot;#函数调用bind方法时&quot; class=&quot;headerlink&quot; title=&quot;函数调用bind方法时&quot;&gt;&lt;/a&gt;函数调用&lt;code&gt;bind&lt;/code&gt;方法时&lt;/h3&gt;&lt;p&gt;函数调用bind方法时会创建一个有相同函数体和作用于的函数，但是新函数的this&lt;strong&gt;永久&lt;/strong&gt;指向bind的第一个参数，即使作为对象方法调用。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/justany/archive/2012/11/01/the_keyword_this_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript中this关键字详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html#ibm-pcon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出 JavaScript 中的 this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;何为this&quot;&gt;&lt;a href=&quot;#何为this&quot; class=&quot;headerlink&quot; title=&quot;何为this&quot;&gt;&lt;/a&gt;何为this&lt;/h2&gt;&lt;p&gt;一般而言，在JavaScript中，this指向函数&lt;strong&gt;执行&lt;/strong&gt;时的当前对象。换句话说，这个关键字与函数的执行环境有关，与声明环境无关。所以this的指向要看如何去调用这个函数而不是声明。&lt;/p&gt;
&lt;h2 id=&quot;不同调用方式中的this&quot;&gt;&lt;a href=&quot;#不同调用方式中的this&quot; class=&quot;headerlink&quot; title=&quot;不同调用方式中的this&quot;&gt;&lt;/a&gt;不同调用方式中的this&lt;/h2&gt;&lt;h3 id=&quot;作为对象的方法调用&quot;&gt;&lt;a href=&quot;#作为对象的方法调用&quot; class=&quot;headerlink&quot; title=&quot;作为对象的方法调用&quot;&gt;&lt;/a&gt;作为对象的方法调用&lt;/h3&gt;&lt;p&gt;把函数赋值给对象的一个属性，然后&lt;strong&gt;通过该对象&lt;/strong&gt;调用该方法，此时函数的执行环境就是这个对象，所以this指向该对象&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://orange-c.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://orange-c.github.io/tags/JavaScript/"/>
    
      <category term="this" scheme="http://orange-c.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现Ajax</title>
    <link href="http://orange-c.github.io/2016/03/15/javascript-ajax/"/>
    <id>http://orange-c.github.io/2016/03/15/javascript-ajax/</id>
    <published>2016-03-15T12:44:28.000Z</published>
    <updated>2016-04-13T14:43:23.650Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;原生javascript实现ajax是一个比较老套但经常出现的面试题，主要是为了筛选掉长期依赖类库编程的前端。对于新手也是个不错的练习。&lt;/p&gt;
&lt;h2 id=&quot;Ajax实现步骤&quot;&gt;&lt;a href=&quot;#Ajax实现步骤&quot; class=&quot;headerlink&quot; title=&quot;Ajax实现步骤&quot;&gt;&lt;/a&gt;Ajax实现步骤&lt;/h2&gt;&lt;h3 id=&quot;创建XMLHttpRequest对象&quot;&gt;&lt;a href=&quot;#创建XMLHttpRequest对象&quot; class=&quot;headerlink&quot; title=&quot;创建XMLHttpRequest对象&quot;&gt;&lt;/a&gt;创建XMLHttpRequest对象&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; XHR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.XMLHttpRequest)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.ActiveXObject)&amp;#123;&lt;span class=&quot;comment&quot;&gt;// IE6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActiveXObject(&lt;span class=&quot;string&quot;&gt;&#39;Microsoft.XMLHTTP&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;PS：ActiveXObject对象在IE11中已移除&lt;/p&gt;
&lt;h3 id=&quot;发送请求&quot;&gt;&lt;a href=&quot;#发送请求&quot; class=&quot;headerlink&quot; title=&quot;发送请求&quot;&gt;&lt;/a&gt;发送请求&lt;/h3&gt;&lt;p&gt;首先调用&lt;code&gt;open&lt;/code&gt;方法，接受三个参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type|String&lt;/code&gt;：表示请求的类型，包括get，post等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url|String&lt;/code&gt;：表示请求的URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async|Boolean&lt;/code&gt;：表示是否异步发送请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后调用&lt;code&gt;send&lt;/code&gt;方法，接受一个参数即要作为请求主体发送的数据&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(type == &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//拼接GET方法的URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(data) != &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url += &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url += i + &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt; + data[i] + &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url = url.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,url.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.open(type,url,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.send(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(type == &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.open(type,url,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.send(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS: 理论上GET方法也可以有body，但一般来说约定GET的参数都放在URL上，所以type为GET时send的参数一般为null。&lt;/p&gt;
&lt;h3 id=&quot;收到响应&quot;&gt;&lt;a href=&quot;#收到响应&quot; class=&quot;headerlink&quot; title=&quot;收到响应&quot;&gt;&lt;/a&gt;收到响应&lt;/h3&gt;&lt;p&gt;当时XHR的&lt;code&gt;readyState&lt;/code&gt;改变时就会触发&lt;code&gt;readystatechange&lt;/code&gt;事件。通常&lt;code&gt;readyState&lt;/code&gt;为4时表示已经接收到所有响应数据。可以根据XHR的&lt;code&gt;status&lt;/code&gt;属性（即HTTP状态码）确定请求是否成功。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XHR.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(XHR.readyState == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(XHR.status &amp;gt;= &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; XHR.status &amp;lt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt; || XHR.status == &lt;span class=&quot;number&quot;&gt;304&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 请求成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 请求失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里整个AJAX已经完成了，接下来就是调用回调函数实现需求了。&lt;/p&gt;
&lt;h2 id=&quot;一个小型的ajax函数实现&quot;&gt;&lt;a href=&quot;#一个小型的ajax函数实现&quot; class=&quot;headerlink&quot; title=&quot;一个小型的ajax函数实现&quot;&gt;&lt;/a&gt;一个小型的ajax函数实现&lt;/h2&gt;&lt;p&gt;曾经写的一个小作业&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;url, options&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; XHR,i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.XMLHttpRequest)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.ActiveXObject)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActiveXObject(&lt;span class=&quot;string&quot;&gt;&#39;Microsoft.XMLHTTP&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(options.type) === &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        options.type = &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(options.type == &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(options.data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url += &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; options.data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                url += i + &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt; + options.data[i] + &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url = url.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,url.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XHR.open(options.type,url,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XHR.send(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(options.type == &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XHR.open(options.type,url,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XHR.send(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(XHR.readyState == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(XHR.status &amp;gt;= &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; &amp;amp;&amp;amp; XHR.status &amp;lt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt; || XHR.status == &lt;span class=&quot;number&quot;&gt;304&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(options.onsuccess)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    options.onsuccess(XHR.responseText,XHR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(options.onfail)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    options.onfail(XHR.responseText,XHR.status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用示例：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ajax(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;someURL&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            test: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onsuccess: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response, xhr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onfail: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response, status&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&#39;AJAX ERROR &#39;&lt;/span&gt; + status + &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt; + response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;第一次写技术博客，边写边改代码，不得不说写的时候回头看代码真是漏洞百出……&lt;br&gt;PS：以后在博客里加上emoji，没表情简直玩不起来。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;原生javascript实现ajax是一个比较老套但经常出现的面试题，主要是为了筛选掉长期依赖类库编程的前端。对于新手也是个不错的练习。&lt;/p&gt;
&lt;h2 id=&quot;Ajax实现步骤&quot;&gt;&lt;a href=&quot;#Ajax实现步骤&quot; class=&quot;headerlink&quot; title=&quot;Ajax实现步骤&quot;&gt;&lt;/a&gt;Ajax实现步骤&lt;/h2&gt;&lt;h3 id=&quot;创建XMLHttpRequest对象&quot;&gt;&lt;a href=&quot;#创建XMLHttpRequest对象&quot; class=&quot;headerlink&quot; title=&quot;创建XMLHttpRequest对象&quot;&gt;&lt;/a&gt;创建XMLHttpRequest对象&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; XHR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.XMLHttpRequest)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.ActiveXObject)&amp;#123;&lt;span class=&quot;comment&quot;&gt;// IE6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActiveXObject(&lt;span class=&quot;string&quot;&gt;&#39;Microsoft.XMLHTTP&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://orange-c.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://orange-c.github.io/tags/JavaScript/"/>
    
      <category term="ajax" scheme="http://orange-c.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://orange-c.github.io/2016/03/14/hello-world/"/>
    <id>http://orange-c.github.io/2016/03/14/hello-world/</id>
    <published>2016-03-14T13:07:31.000Z</published>
    <updated>2016-04-13T14:38:57.410Z</updated>
    
    <content type="html">&lt;h2 id=&quot;博客上线&quot;&gt;&lt;a href=&quot;#博客上线&quot; class=&quot;headerlink&quot; title=&quot;博客上线&quot;&gt;&lt;/a&gt;博客上线&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//Hi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;+gihub搭建了这个博客，主题采用的是&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt;。暂时不会变动博客了，静下心好好学基础&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;反思&quot;&gt;&lt;a href=&quot;#反思&quot; class=&quot;headerlink&quot; title=&quot;反思&quot;&gt;&lt;/a&gt;反思&lt;/h2&gt;&lt;p&gt;之前用jekyll搭建了博客，花了不少时间改样式，当时心态也不好越改越烦……仔细想想还是自己太过偏执了，总是拘泥于这些小事情并以此为借口偷懒，&lt;del&gt;我这20年的人生简直是用各种方式偷懒。&lt;/del&gt;&lt;strong&gt;可是人生是拖不得的啊！&lt;/strong&gt;总之现在开始要静下心了，大三的专业课都很有意思，前端的技术还有很多要学，不能在磨叽中相信命运了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;博客上线&quot;&gt;&lt;a href=&quot;#博客上线&quot; class=&quot;headerlink&quot; title=&quot;博客上线&quot;&gt;&lt;/a&gt;博客上线&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//Hi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用&lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;+gihub搭建了这个博客，主题采用的是&lt;a href=&quot;http://theme-next.iissnan.com/&quot;&gt;NexT&lt;/a&gt;。暂时不会变动博客了，静下心好好学基础&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://orange-c.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Whatever" scheme="http://orange-c.github.io/tags/Whatever/"/>
    
  </entry>
  
</feed>
